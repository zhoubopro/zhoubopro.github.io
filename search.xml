<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中文链接</title>
      <link href="/2019/09/18/testchina/"/>
      <url>/2019/09/18/testchina/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/09/18/gitbase/"/>
      <url>/2019/09/18/gitbase/</url>
      
        <content type="html"><![CDATA[<h2 id="一、git常用指令"><a href="#一、git常用指令" class="headerlink" title="一、git常用指令"></a>一、git常用指令</h2><p>1、git显示全部分支</p><blockquote><p>// 显示本地分支<br>git branch<br>// 显示远程分支<br>git branch -a </p></blockquote><p>2、git创建分支</p><blockquote><p>// 分支名<br>git branch </p></blockquote><p>3、切换分支</p><blockquote><p>// 分支名<br>git checkout<br>// 分支名 若分支不存在，则创建它<br>git checkout  -b </p></blockquote><p>4、删除分支</p><blockquote><p>git branch -d 分支名<br>-d 当分支已经合并到主干后删除<br>-D无论如何都删除分支</p></blockquote><p>5、合并分支</p><blockquote><p>git merge 分支名</p></blockquote><p>6、撤销前一次commit</p><blockquote><p>git revert HEAD</p></blockquote><p>7、撤销所有本地修改</p><blockquote><p>git reset –hard</p></blockquote><p>8、撤销所有本地到上一次修改</p><blockquote><p>git reset –hard HEAD^</p></blockquote><p>9、撤销上一次commit，将commit的文件撤回暂存区</p><blockquote><p>git reset –soft HEAD^<br>要是想撤销到上上次，就是HEAD^^  ,以此类推。<br>git revert 是撤销某次操作，此次操作之前的commit都会被保留<br>git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区</p></blockquote><p>10、将此次更新文件并入到上次commit的记录中，不新添加commit</p><blockquote><p>git commit -amend</p></blockquote><h2 id="二、git进阶"><a href="#二、git进阶" class="headerlink" title="二、git进阶"></a>二、git进阶</h2><p>1、git tag</p><blockquote><p>可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了， 例如你可以使用 ‘git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20’来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了</p></blockquote><p>2、git stash</p><blockquote><p>把所有本地修改都放到暂存区</p></blockquote><p>3、git stash pop</p><blockquote><p>把git stash放到暂存区的代码拿出来</p></blockquote><p>tips：</p><ol><li>使用git stash保存当前的工作现场，那么就可以切换到其他分支进行工作，或者在当前分支上完成其他紧急的工作，比如修订一个bug测试提交。</li><li>如果一个使用了一个git stash，切换到一个分支，且在该分支上的工作未完成也需要保存它的工作现场。再使用gitstash。那么stash 队列中就有了两个工作现场。</li><li>可以使用git stash list。查看stash队列。</li><li>如果在一个分支上想要恢复某一个工作现场怎么办：先用git stashlist查看stash队列。确定要恢复哪个工作现场到当前分支。然后用git stash pop stash@{num}。num就是你要恢复的工作现场的编号。</li><li>如果想要清空stash队列则使用git stash clear。</li><li>同时注意使用git stashpop命令是恢复stash队列中的stash@{0}即最上层的那个工作现场。而且使用pop命令恢复的工作现场，其对应的stash在队列中删除。使用git stash apply stash@{num}方法除了不在stash队列删除外其他和git stashpop 完全一样。</li></ol><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p> 1、提交合并失败<br> 查看源文件<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hYTA2NGZjNzhhYjIzNzY4ODQyMTBkMWMxNTRkNjIzNi94bWxub3RlLzY5RkFGMTkyQzU2NjRCMkZCMTU0RDk5RTc5MzQzOEFFLzc1Nw" alt="这里写图片描述"></p><p>git迷惑之处在于它不知道是把hello world这行放在前面还是把报时功能这段放在前面。<br>修改冲突<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hYTA2NGZjNzhhYjIzNzY4ODQyMTBkMWMxNTRkNjIzNi94bWxub3RlL0NERDcxMTdFODlFNjRCOTc4Q0E5NkNEMzEyMThEOEE1Lzc1Ng" alt="这里写图片描述"></p><p>重新提交<br>git commit -am “xxx”</p><p>2、解决gerrit冲突<br>解决远程冲突：<br>cd demo以分支为develop为例打开Gerrit有冲突的那个网址，如 <a href="http://192.168.1.33:8080/#/c/16/" target="_blank" rel="noopener">http://192.168.1.33:8080/#/c/16/</a> 找到Download 如下命令，执行<br>git fetch ssh://minggui.li@192.168.1.33:29418/demo refs/changes/16/16/1 &amp;&amp; git checkout FETCH_HEADgit checkout -b new_branch_namegit fetch origingit rebase origin/develop<br>修改冲突文件<br>git add .git rebase –continuegit push origin new_branch_name:refs/for/developgit checkout developgit branch -D new_branch_name不会产生新的changes记录，将原changes记录重新review提交即可，这时在原冲突机器上直接pull会本地冲突，需要git reset –hard HEAD^否则会出现cannot do a partial commit during a merge.最后更新下代码git pull</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
